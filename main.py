from aiogram import Bot, Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
import sqlite3 as sq
import asyncio
import aioschedule
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted,
                                      MessageToDeleteNotFound, BotBlocked, BotKicked)
from contextlib import suppress
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import filters

storage = MemoryStorage()
# bot_token = '5463577812:AAEeYWZMkwYjRxf3Gm_cEsGZvYxG__ohMY0'
bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=storage)

btnMonday = KeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
btnTuesday = KeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫')
btnWednesday = KeyboardButton('–°—Ä–µ–¥–∞')
btnThursday = KeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥')
btnFriday = KeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞')
btnSaturday = KeyboardButton('–°—É–±–±–æ—Ç–∞')
btnSunday = KeyboardButton('–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
btnEveryday = KeyboardButton('–ö–∞–∂–¥—ã–π –¥–µ–Ω—å')
btnEsc = KeyboardButton('–û—Ç–º–µ–Ω–∞')
dayMenu = ReplyKeyboardMarkup(resize_keyboard=True).add(btnEveryday, btnSunday, btnSaturday, btnThursday, btnFriday,
                                                        btnWednesday, btnMonday, btnTuesday, btnEsc)


def clear_text(a):
    a = str(a)
    a = a.split("'")
    a = ''.join(a)
    a = a.split(")")
    a = ''.join(a)
    a = a.split("(")
    a = ''.join(a)
    a = a.split(",")
    a = '|'.join(a)
    a = a.split("]")
    a = ''.join(a)
    a = a.split("[")
    a = ''.join(a)
    return a


@dp.message_handler(commands="start")
async def start(message: types.Message):
    global id_user
    id_user = message.from_id
    group = message.chat.id
    print(group)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name} \n\n' '<i>–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö '
                         '—Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¢–û–õ–¨–ö–û –≤ –≥—Ä—É–ø–ø—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n\n'
                         '–î–ª—è –≤ –∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</i>\n\n'
                         '<b><u>–ó–ê–î–ê–ß–ò –ú–û–ñ–ï–¢ –í–´–°–¢–ê–í–õ–Ø–¢–¨ –¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –ß–ê–¢–ê</u></b>',
                         parse_mode=types.ParseMode.HTML, disable_notification=True)
    sql_add_user_base('CREATE TABLE IF NOT EXISTS users (date,id, time, task, descriptions)')
    await bot.send_video(message.chat.id,open('IMG_7784.mp4','rb'))

class FSMcreatetask(StatesGroup):  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
    date = State()
    id = State()
    time = State()
    task = State()
    descriptions = State()


@dp.message_handler(commands="task", state=None, is_chat_admin=True)
async def task(message: types.Message):
    await FSMcreatetask.date.set()
    await message.answer('<i>–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. </i>', reply_markup=dayMenu,
                         parse_mode=types.ParseMode.HTML, disable_notification=True)
    await message.answer('<i>–ò –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.</i>üëá', reply_markup=dayMenu,
                         parse_mode=types.ParseMode.HTML, disable_notification=True)

@dp.message_handler(state=FSMcreatetask.date)
async def load_name(message: types.Message, state: FSMContext):
    if message.text == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' or message.text == '–í—Ç–æ—Ä–Ω–∏–∫' or message.text == '–°—Ä–µ–¥–∞' \
            or message.text == '–ß–µ—Ç–≤–µ—Ä–≥' or message.text == '–ü—è—Ç–Ω–∏—Ü–∞' or message.text == '–°—É–±–±–æ—Ç–∞' \
            or message.text == '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' or message.text == '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å':
        async with state.proxy() as data:
            data['date'] = message.text
            data['id'] = message.chat.id
        await FSMcreatetask.time.set()
        await message.answer('<i>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ü—Ä–∏–º–µ—Ä: 00:00</i>',
                             parse_mode=types.ParseMode.HTML, reply_markup=ReplyKeyboardRemove(), disable_notification=True)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('<i>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.</i>', parse_mode=types.ParseMode.HTML,
                             reply_markup=ReplyKeyboardRemove(), disable_notification=True)

    else:
        await message.answer('<b>–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n'
                             ' <i>–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. </i>', parse_mode=types.ParseMode.HTML,
                             reply_markup=dayMenu, disable_notification=True)
        await message.answer('<i>–ò –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.</i>üëá', reply_markup=dayMenu,
                             parse_mode=types.ParseMode.HTML, disable_notification=True)

        # await FSMcreatetask.date.set()


@dp.message_handler(state=FSMcreatetask.time)
async def load_time(message: types.Message, state: FSMContext):
    testmessage = message.text
    testmessage = testmessage.split(":")
    testmessage = ''.join(testmessage)
    testmessage = testmessage.isdigit()
    if testmessage and len(message.text) == 5:
        async with state.proxy() as data:
            data['time'] = message.text
        await FSMcreatetask.task.set()
        await message.answer('<i>–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É.</i>', parse_mode=types.ParseMode.HTML, disable_notification=True)
    else:
        await message.answer('<b>–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n\n'
                             '<i>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ü—Ä–∏–º–µ—Ä: 00:00</i>',
                             parse_mode=types.ParseMode.HTML, reply_markup=ReplyKeyboardRemove(), disable_notification=True)
        await FSMcreatetask.time.set()


@dp.message_handler(content_types=ContentType.VIDEO_NOTE,state=FSMcreatetask.task)
async def video_note(message: types.Message, state: FSMContext):
    await message.answer('<i>–í–∏–¥–µ–æ–∫—Ä—É–∂–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ</i>',parse_mode=types.ParseMode.HTML)

@dp.message_handler(content_types=ContentType.VOICE,state=FSMcreatetask.task)
async def voice(message: types.Message, state: FSMContext):
    await message.answer('<i>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–∂–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è ü§¶‚Äç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ.</i>',parse_mode=types.ParseMode.HTML)

@dp.message_handler(content_types=ContentType.PHOTO,state=FSMcreatetask.task)
async def video_note(message: types.Message, state: FSMContext):
    await message.answer('<i>–§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ</i>',parse_mode=types.ParseMode.HTML)



@dp.message_handler(state=FSMcreatetask.task)
async def load_task_sql(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['task'] = message.text
    await FSMcreatetask.descriptions.set()
    await message.answer('<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.</i>', parse_mode=types.ParseMode.HTML, disable_notification=True)


@dp.message_handler(state=FSMcreatetask.descriptions)
async def load_descriptions(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['descriptions'] = message.text
    await sql_add_command(state, 'INSERT OR REPLACE INTO users VALUES (?,?,?,?,?)')  # –≤—ã–≤–æ–¥–∏–ª –≤ –±–∞–∑—É
    await message.answer('<i>–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</i>', parse_mode=types.ParseMode.HTML, disable_notification=True)
    await state.finish()
    sql_add_user_base('CREATE TABLE IF NOT EXISTS users (date,id, time, task, descriptions)')
    send_task()


@dp.message_handler(commands="list_task", state=None, is_chat_admin=True)
async def task(message: types.Message):
    group = message.chat.id
    list = sql_task(f'SELECT date, time, task, descriptions FROM users WHERE id = {str(group)}')
    print(list)
    if list:
        for task in list:
            await message.answer(clear_text(task))
    else:
        await message.answer('<i>–ù–∏–∫–∞–∫–∏—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ.</i>', parse_mode=types.ParseMode.HTML, disable_notification=True)


class FSMdeletetask(StatesGroup):  # —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    task = State()


@dp.message_handler(commands="delete_task", state=None, is_chat_admin=True)
async def task(message: types.Message):
    await FSMdeletetask.task.set()
    await message.answer('<i>–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.</i>', parse_mode=types.ParseMode.HTML, disable_notification=True)


@dp.message_handler(state=FSMdeletetask.task)
async def load_name(message: types.Message, state: FSMContext):
    group = message.chat.id
    async with state.proxy() as data:
        data['task'] = message.text
        request = str(tuple(data.values()))[2:-3]

    await state.finish()
    sql = sql_reqwest_task(f"SELECT * FROM users WHERE id = {str(group)} and descriptions = '{request}'")

    sql_task(f"DELETE from users where id = {group} and descriptions = '{request}'")
    if sql:
        await message.answer('<i>–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.</i>', parse_mode=types.ParseMode.HTML, disable_notification=True)
    else:
        await message.answer('<i>–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</i>', parse_mode=types.ParseMode.HTML, disable_notification=True)


# _________________________–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É______________________


async def sql_add_command(state, request):
    global base, cur
    base = sq.connect('task.db')
    cur = base.cursor()
    async with state.proxy() as data:
        cur.execute(request, tuple(data.values()))
        base.commit()


def sql_task(reqwest):
    global base, cur
    base = sq.connect('task.db')
    cur = base.cursor()
    cur.execute(reqwest).fetchall()
    base.commit()
    return cur.execute(reqwest).fetchall()


def sql_add_user_base(reqwest):
    global base, cur
    base = sq.connect('task.db')
    cur = base.cursor()
    if base:
        print('–ë–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞')
    base.execute(reqwest)
    base.commit()


def sql_reqwest_task(reqwest):
    global base, cur
    base = sq.connect('task.db')
    cur = base.cursor()
    cur.execute(reqwest).fetchall()
    base.commit()
    return cur.execute(reqwest).fetchall()


@dp.message_handler(filters.Text(contains='–±–æ—Ç', ignore_case=True))
async def text_example(msg: types.Message):
    await msg.reply('–≠—Ç–æ –≤—ã –ø—Ä–æ –º–µ–Ω—è)?')


@dp.message_handler()
async def load_task(message: types.Message):
    if message.text == '/start@CREATOR_TASK_FOR_CHAT_BOT' or message.text == '/task@CREATOR_TASK_FOR_CHAT_BOT' \
            or message.text == '/delete_task@CREATOR_TASK_FOR_CHAT_BOT' or message.text == '/list_task@CREATOR_TASK_FOR_CHAT_BOT':
        try:
            await message.delete()
        except MessageCantBeDeleted:
            await asyncio.sleep(1)

@dp.message_handler(state=FSMcreatetask.descriptions)
async def load_task(chat_id_group, text_task):
    try:
        await dp.bot.send_message(chat_id=chat_id_group, text=text_task)
        await asyncio.sleep(1)
    except BotKicked:
        await asyncio.sleep(1)


async def send_task():
    sql_tasks_sunday = sql_reqwest_task(f'SELECT id, time, task FROM users WHERE  date = "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"')
    for sql_task_sunday in sql_tasks_sunday:
        aioschedule.every().sunday.at(time_str=str(sql_task_sunday[1])).do(load_task, sql_task_sunday[0],
                                                                           sql_task_sunday[2])

    sql_tasks_saturday = sql_reqwest_task(f'SELECT id, time, task FROM users WHERE  date = "–°—É–±–±–æ—Ç–∞"')
    for sql_task_saturday in sql_tasks_saturday:
        aioschedule.every().saturday.at(time_str=str(sql_task_saturday[1])).do(load_task, sql_task_saturday[0],
                                                                               sql_task_saturday[2])

    sql_tasks_friday = sql_reqwest_task(f'SELECT id, time, task FROM users WHERE  date = "–ü—è—Ç–Ω–∏—Ü–∞"')
    for sql_task_friday in sql_tasks_friday:
        aioschedule.every().friday.at(time_str=str(sql_task_friday[1])).do(load_task, sql_task_friday[0],
                                                                           sql_task_friday[2])

    sql_tasks_thursday = sql_reqwest_task(f'SELECT id, time, task FROM users WHERE  date = "–ß–µ—Ç–≤–µ—Ä–≥"')
    for sql_task_thursday in sql_tasks_thursday:
        aioschedule.every().thursday.at(time_str=str(sql_task_thursday[1])).do(load_task, sql_task_thursday[0],
                                                                               sql_task_thursday[2])

    sql_tasks_wednesday = sql_reqwest_task(f'SELECT id, time, task FROM users WHERE  date = "–°—Ä–µ–¥–∞"')
    for sql_task_wednesday in sql_tasks_wednesday:
        aioschedule.every().wednesday.at(time_str=str(sql_task_wednesday[1])).do(load_task, sql_task_wednesday[0],
                                                                                 sql_task_wednesday[2])

    sql_tasks_tuesday = sql_reqwest_task(f'SELECT id, time, task FROM users WHERE  date = "–í—Ç–æ—Ä–Ω–∏–∫"')
    for sql_task_tuesday in sql_tasks_tuesday:
        aioschedule.every().tuesday.at(time_str=str(sql_task_tuesday[1])).do(load_task, sql_task_tuesday[0],
                                                                             sql_task_tuesday[2])

    sql_tasks_monday = sql_reqwest_task(f'SELECT id, time, task FROM users WHERE  date = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"')
    for sql_task_monday in sql_tasks_monday:
        aioschedule.every().monday.at(time_str=str(sql_task_monday[1])).do(load_task, sql_task_monday[0],
                                                                           sql_task_monday[2])

    sql_tasks_everyday = sql_reqwest_task(f'SELECT id, time, task FROM users WHERE  date = "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å"')
    for sql_task_everyday in sql_tasks_everyday:
        aioschedule.every().day.at(time_str=str(sql_task_everyday[1])).do(load_task, sql_task_everyday[0],
                                                                          sql_task_everyday[2])
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(dp):
    asyncio.create_task(send_task())


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
